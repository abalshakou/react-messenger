{"version":3,"sources":["server/Query.js","client/Registration.js","client/Login.js","client/AddMessage.js","helpers/ThreeDots.js","client/Chat.js","client/List.js","client/FirstScreen.js","server/ApolloSetup.js","App.js","index.js"],"names":["SUBSCRIPTION_QUERY","gql","SUBSCRIPTION_QUERY_USER","SEND_USER","UPDATE_USER","SEND_MESSAGE","Registration","login","users","useState","auth","addUser","name","email","sendUser","variables","then","useMutation","error","token","setToken","setError","handleChange","e","target","value","Paper","elevation","className","href","onClick","preventDefault","TextField","required","id","label","onChange","variant","style","margin","type","Button","existingUser","some","user","length","validator","isEmail","localStorage","JSON","stringify","Login","updateUser","existingUserId","find","patch","filter","set","lastVisit","Date","toISOString","setUser","AddMessage","senderMail","receiverMail","message","setMessage","addMessage","maxRows","minRows","rows","multiline","timestamp","ThreeDots","props","viewBox","height","width","backgroundColor","cx","cy","r","metadata","github","description","filename","Chat","parse","getItem","useSubscription","in","or","loading","data","useEffect","document","title","moment","fromNow","queryMessage","map","item","List","chat","setChat","setExit","handleOpenChat","size","clear","FirstScreen","hasAccount","setHasAccount","queryUser","endpoint","wsLink","WebSocketLink","uri","options","reconnect","httpLink","HttpLink","link","split","query","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","App","ApolloProvider","client","apolloClient","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.903b77e5.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nconst SUBSCRIPTION_QUERY = gql`\n  subscription onQueryMessage($filter: MessageFilter!) {\n    queryMessage(filter: $filter ) {\n     id\n        message\n        receiverMail\n        senderMail\n        timestamp\n    }\n  }\n`;\n\nconst SUBSCRIPTION_QUERY_USER = gql`\n  subscription {\n    queryUser(order: { desc: name }) {\n    id\n      name\n      email\n      lastVisit\n      messages {\n            id\n            message\n            receiverMail\n            senderMail\n            timestamp\n          }\n    }\n  }\n`;\nconst SEND_USER = gql`\n  mutation sendUser($name: String!, $email: String!) {\n    addUser(input: [{ name: $name, email: $email }]) {\n         user {\n           id\n           name\n           email\n         }\n    }\n  }\n`;\n\nconst UPDATE_USER = gql`\n  mutation updateUser($patch: UpdateUserInput!) {\n    updateUser(input: $patch) {\n         user {\n           id\n           lastVisit\n         }\n    }\n  }\n`;\n\nconst SEND_MESSAGE = gql`\n  mutation sendMessage($message: String!, $receiverMail: String!, $senderMail: String!, $timestamp: DateTime!) {\n    addMessage(input: [{ message: $message, receiverMail: $receiverMail, senderMail: $senderMail, timestamp: $timestamp  }]) {\n      message {\n         id\n          message\n          receiverMail\n          senderMail\n          timestamp\n      }\n    }\n  }\n`;\n\nconst DELETE_MESSAGE = gql`\n  mutation deleteMessage($filter: MessageFilter!) {\n    deleteMessage(filter: $filter )  {\n    msg\n    numUids\n    }\n  }\n`;\n\nexport { SUBSCRIPTION_QUERY, SUBSCRIPTION_QUERY_USER, SEND_USER, SEND_MESSAGE, DELETE_MESSAGE, UPDATE_USER };","import React, {useState} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport validator from \"validator\";\nimport {useMutation} from \"@apollo/client\";\nimport {SEND_USER} from \"../server/Query\";\n\nconst Registration = ({login, users}) => {\n    const [auth, setAuth] = useState(true);\n\n    const addUser = () => {\n        if (name && email) {\n            sendUser({variables: {name, email}}).then();\n        }\n    }\n\n    const [sendUser, {error: mutationError}] = useMutation(SEND_USER);\n    const [token, setToken] = useState({name: \"\", email: \"\"});\n    const [error, setError] = useState(\"\");\n\n    const handleChange = e => {\n        setToken({...token, [e.target.name]: e.target.value});\n    };\n\n    const validate = () => {\n        const {name, email} = token;\n\n        const existingUser = users.some(function (user) {\n            return user.email === email;\n        });\n\n        if (!name.length) {\n            setError(\"Name is required\");\n        }\n\n        if (!validator.isEmail(email)) {\n            setError(\"Valid email is required\");\n        }\n\n        if (existingUser) {\n            setError(\"Email already in use, maybe you want to enter?\");\n        }\n\n        if (name.length && validator.isEmail(email) && !existingUser) {\n            setError(\"\");\n\n            addUser(email, name);\n            localStorage[\"token\"] = JSON.stringify(token);\n        }\n    };\n\n    const {name, email} = token;\n\n    return (\n        <Paper elevation={3} className=\"paper\">\n            User Details,\n            <a href='/' onClick={(e) => {\n            e.preventDefault();\n            login(auth);\n        }}>has account?</a>\n            <TextField\n                required\n                id=\"outlined-name\"\n                label=\"Name\"\n                name=\"name\"\n                value={name}\n                onChange={handleChange}\n                variant=\"outlined\"\n                style={{margin: 10}}\n            />\n\n            <TextField\n                required\n                id=\"outlined-email-input\"\n                type=\"email\"\n                label=\"Email\"\n                name=\"email\"\n                value={email}\n                onChange={handleChange}\n                variant=\"outlined\"\n                className=\"text-area\"\n                style={{margin: 10}}\n            />\n\n            <Button variant=\"contained\" onClick={validate} style={{margin: 15}}>\n                Register\n            </Button>\n            <div>{error}</div>\n        </Paper>\n    );\n};\n\nexport default Registration;","import React, {useState} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport validator from \"validator\";\nimport {useMutation} from \"@apollo/client\";\nimport {UPDATE_USER} from \"../server/Query\";\n\nconst Login = ({users}) => {\n\n    const setUser = (existingUserId) => {\n\n        updateUser({\n            variables: {\n                patch:\n                    {\n                        filter: {\n                            id: existingUserId\n                        },\n                        set: {\n                            lastVisit: (new Date()).toISOString()\n                        }\n                    }\n            }\n        }).then();\n    }\n\n    const [token, setToken] = useState({name: \"\", email: \"\"});\n    const [error, setError] = useState(\"\");\n    const [updateUser] = useMutation(UPDATE_USER);\n\n    const handleChange = e => {\n        setToken({...token, [e.target.name]: e.target.value});\n    };\n\n    const validate = () => {\n        const {name, email} = token;\n\n        const existingUser = users.some(function (user) {\n            return user.email === email;\n        });\n\n        if (!validator.isEmail(email)) {\n            setError(\"Valid email is required\");\n        }\n\n        if (validator.isEmail(email) && existingUser) {\n            setError(\"\");\n            const existingUserId = users.find(user => user.email === email).id\n\n            localStorage[\"token\"] = JSON.stringify(token);\n            setUser(existingUserId);\n        }\n    };\n\n    const {name, email} = token;\n\n    return (\n        <Paper elevation={3} className=\"paper\">\n            Has account? Enter email\n\n            <TextField\n                required\n                id=\"outlined-email-input\"\n                type=\"email\"\n                label=\"Email\"\n                name=\"email\"\n                value={email}\n                onChange={handleChange}\n                variant=\"outlined\"\n                className=\"text-area\"\n                style={{margin: 10}}\n            />\n\n            <Button variant=\"contained\" onClick={validate} style={{margin: 15}}>\n                Log in\n            </Button>\n            <div>{error}</div>\n        </Paper>\n    );\n};\n\nexport default Login;","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport {SEND_MESSAGE} from \"../server/Query\"\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@mui/material/TextField';\n\nconst AddMessage = ({senderMail, receiverMail}) => {\n    const [message, setMessage] = useState('');\n    const [addMessage, { error: mutationError }] = useMutation(SEND_MESSAGE);\n\n    const handleClick = () => {\n        if (message) {\n            addMessage({ variables: { message, receiverMail, senderMail, timestamp: (new Date()).toISOString() } });\n            setMessage('');\n        }\n    }\n\n    return (\n        <>\n            <TextField\n                maxRows={8}\n                minRows={2}\n                rows={4}\n                id=\"standard-message\"\n                label=\"Enter you message\"\n                name=\"message\"\n                value={message}\n                multiline\n                onChange={e => setMessage(e.target.value)}\n                style={{ margin: 10 }}\n            />\n\n            <Button type=\"button\" onClick={() => handleClick()}>Send</Button>\n        </>\n    );\n};\n\nexport default AddMessage;","import React from 'react'\nimport ContentLoader from 'react-content-loader'\n\nconst ThreeDots = props => (\n    <ContentLoader\n        viewBox=\"0 0 400 160\"\n        height={160}\n        width={400}\n        backgroundColor=\"transparent\"\n        {...props}\n    >\n        <circle cx=\"150\" cy=\"86\" r=\"8\" />\n        <circle cx=\"194\" cy=\"86\" r=\"8\" />\n        <circle cx=\"238\" cy=\"86\" r=\"8\" />\n    </ContentLoader>\n)\n\nThreeDots.metadata = {\n    name: 'RioF',\n    github: 'clariokids',\n    description: 'Three Dots',\n    filename: 'ThreeDots',\n}\n\nexport default ThreeDots","import React, {useState, useEffect} from \"react\";\nimport {useSubscription} from \"@apollo/client\";\nimport moment from 'moment';\nimport {SUBSCRIPTION_QUERY} from \"../server/Query\"\nimport AddMessage from \"./AddMessage\"\nimport ThreeDots from \"../helpers/ThreeDots\"\n\nconst Chat = ({id, name, email, lastVisit}) => {\n\n    const token = JSON.parse(localStorage.getItem(\"token\"));\n\n    const [senderMail] = useState(token.email);\n\n    const {loading, error, data} = useSubscription(SUBSCRIPTION_QUERY,\n        {\n            variables: {\n                filter: {\n                    senderMail: {in: [senderMail]},\n                    receiverMail: {in: [email]},\n                    or: {senderMail: {in: [email]}, receiverMail: {in: [senderMail]}}\n                }\n            },\n        }\n    );\n\n    useEffect(() => {\n        document.title = `You in chat with ${name}`;\n    });\n\n    if (loading) return (\n        <>\n            <h3>Loading</h3>\n            <ThreeDots/>\n        </>\n    );\n\n    return (\n        <>\n            <div className=\"personal-chat\">\n                <div className=\"chats-header\">\n                    <div className=\"back-button\" >\n                        <div className=\"bar1\"/>\n                        <div className=\"bar2\"/>\n                        <div className=\"bar3\"/>\n                    </div>\n                    <div className=\"user-typing\">\n                        You in chat with  <strong>{name}</strong>,  last viewed {lastVisit ? moment(lastVisit).fromNow() : 'never'}\n                    </div>\n                </div>\n                <div className=\"all-messages\">\n                    {data.queryMessage.map(item =>\n                        (\n                            <div key={item.id} className={token.email === item.senderMail ? 'sender' : 'receiver'}>\n                                <div className=\"sender-name\">\n                                    {token.email !== email ? item.senderMail : item.receiverMail}\n                                </div>\n                                {item.message}{' '}\n                                <span className=\"time\"> {moment(item.timestamp).fromNow()}</span>\n                            </div>\n                        )\n                    )}\n                    <AddMessage senderMail={senderMail} receiverMail={email}/>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Chat;","import React, {useState} from 'react'\nimport Chat from \"./Chat\";\nimport Button from \"@material-ui/core/Button\";\nimport moment from \"moment\";\n\nconst List = ({login, users}) => {\n\n    const [chat, setChat] = useState('');\n    const [exit, setExit] = useState('');\n    const [auth, setAuth] = useState(false);\n    const token = JSON.parse(localStorage.getItem(\"token\"));\n\n    const handleOpenChat = (item) => {\n        setChat(item);\n    }\n\n    const handleClose = () => {\n        setChat('');\n    }\n\n    const handleExit = () => {\n        localStorage.clear();\n        setExit(true);\n        login(auth);\n    }\n\n    const existingUser = users.find(user => user.email && user.email === token.email).name;\n\n    return (\n        <>\n            <div className=\"chat-page\">\n                <div className=\"user-welcome\">\n                    <div className=\"user-heading\">\n                        <h3>Hello, { existingUser ? existingUser : '' } </h3>\n                        <h5>Total Users : {users.length}</h5>\n\n                        <Button\n                            className=\"leave\"\n                            size=\"small\"\n                            variant=\"outlined\"\n                            onClick={() => handleExit()}\n                        >\n                            Exit\n                        </Button>\n                        <Button\n                            className=\"close\"\n                            size=\"small\"\n                            variant=\"outlined\"\n                            onClick={() => handleClose()}\n                        >\n                            Close chat\n                        </Button>\n                    </div>\n                    <div className=\"select-user\">\n                        {users.map(item =>\n                            item.email && item.email !== token.email ? (\n                                <div\n                                    key={item.id}\n                                    className=\"users\"\n                                    onClick={() => handleOpenChat(item)}\n                                >\n                                    {item.name}\n                                    {item.lastVisit ? (\n                                        <span className=\"time\"> {moment(item.lastVisit).fromNow()}</span>) : (<></>)\n                                    }\n                                </div>\n                            ) : (\n                                <div\n                                    key={item.id}\n                                    className=\"users saved-chat\"\n                                    onClick={() => handleOpenChat(item)}\n                                >\n                                    Saved messages <div className=\"small\">{item.name}</div>\n                                </div>\n                            )\n                        )}\n                    </div>\n                </div>\n\n                {chat ? (\n                    <Chat id={chat.id} name={chat.name} email={chat.email} lastVisit={chat.lastVisit}/>\n                ) : <div></div>\n                }\n            </div>\n        </>\n    );\n}\n\nexport default List","import React, {useState} from \"react\";\nimport {useSubscription} from \"@apollo/client\";\nimport {SUBSCRIPTION_QUERY_USER, SEND_USER} from \"../server/Query\"\nimport Registration from \"./Registration\"\nimport Login from \"./Login\"\nimport List from \"./List\"\nimport ThreeDots from \"../helpers/ThreeDots\"\nimport Paper from \"@material-ui/core/Paper\";\n\nconst FirstScreen = () => {\n\n    const [hasAccount, setHasAccount] = useState(false);\n    const {data} = useSubscription(SUBSCRIPTION_QUERY_USER);\n\n    if (!data || !data.queryUser) return (\n        <>\n            <Paper elevation={3} className=\"paper\">\n                <h3>Loading </h3>\n                <ThreeDots/>\n            </Paper>\n        </>\n    );\n\n    if ((localStorage.getItem('token'))) {\n        return (<List login={auth => setHasAccount(auth)} users={data.queryUser}/>);\n    } else if (hasAccount) {\n        return (<Login users={data.queryUser}/>);\n    } else {\n        return (<Registration login={auth => setHasAccount(auth)} users={data.queryUser}/>);\n    }\n};\n\nexport default FirstScreen;","import { ApolloClient } from '@apollo/client/core';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { InMemoryCache } from '@apollo/client/cache';\nimport { HttpLink, split } from '@apollo/client';\nimport { WebSocketLink } from \"@apollo/link-ws\";\n\nconst endpoint = \"nameless-brook-310157.eu-central-1.aws.cloud.dgraph.io/graphql\";\n\nconst wsLink = new WebSocketLink({\n    uri: `wss://${endpoint}`,\n    options: {\n        reconnect: true\n    }\n});\n\nconst httpLink = new HttpLink({\n    uri: `https://${endpoint}`\n});\n\nconst link = split(\n    // split based on operation type\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"subscription\"\n        );\n    },\n    wsLink,\n    httpLink\n);\n\nexport default new ApolloClient({\n    cache: new InMemoryCache(),\n    link\n});","import 'tachyons';\nimport FirstScreen from './client/FirstScreen';\nimport {ApolloProvider} from '@apollo/client'\nimport apolloClient from './server/ApolloSetup';\n\nfunction App() {\n\n    return (\n        <>\n            <ApolloProvider client={apolloClient}>\n                <FirstScreen/>\n            </ApolloProvider>\n        </>\n    );\n}\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport \"./styles/index.css\";\n\nReactDOM.render(\n<React.StrictMode>\n<App />\n</React.StrictMode>,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}